@page "/servermanagement"

@inject ChatbotService.ChatbotServiceClient ChatbotClient
@using Frontend.BlazorWebassembly.Data;
@using General.Interfaces.Data;

@code {
    string toastText = "";

    IServerSettings settings = null;

    IChatbotServiceStatus serviceStatus = null;

    protected async override void OnInitialized()
    {
        base.OnInitialized();
        var serverSettings = await ChatbotClient.GetServerSettingsAsync(new EmptyRequest());
        settings = new BackendSettings()
            {
                DbPath = serverSettings.DbPath,
                RootUrl = serverSettings.RootUrl,
                ExcludedUrls = serverSettings.IgnoredUrls,
                WaitedClassName = serverSettings.WaitedClassName
            };

        var availability = await ChatbotClient.GetStatusAsync(new EmptyRequest());
        serviceStatus = new ServiceStatus()
            {
                ContextCount = availability.ContextCount,
                HtmlFileCount = availability.HtmlFileCount,
                ContextExtraction = availability.ContextExtraction,
                HtmlExtraction = availability.HtmlExtraction
            };
        StateHasChanged();
    }

    async void RunHtmlExtraction()
    {
        try
        {
            var res = ChatbotClient.StartHtmlExtractionAsync(new EmptyRequest());
            toastText = "Html Extraction started";
            toastText = (await res).Text;
        }
        catch(Exception ex )
        {
            toastText = ex.Message;
        }
        StateHasChanged();

    }

    async void RunContextExtraction()
    {
        try
        {
            var res = ChatbotClient.StartContextExtractionAsync(new EmptyRequest());

            toastText = "Context Extraction started";
            toastText = (await res).Text;
        }
        catch (Exception ex)
        {
            toastText = ex.Message;
        }
        StateHasChanged();

    }

    void SaveSettings()
    {
        if(settings == null)
        {
            return;
        }

        var curSettings = new CurrentSettings()
        {
            DbPath = settings.DbPath,
            RootUrl = settings.RootUrl,
            WaitedClassName = settings.WaitedClassName,
        };
        curSettings.IgnoredUrls.AddRange(settings.ExcludedUrls);
        ChatbotClient.SetServerSettingsAsync(curSettings);

        var availability = ChatbotClient.GetStatus(new EmptyRequest());
        serviceStatus = new ServiceStatus()
            {
                ContextCount = availability.ContextCount,
                HtmlFileCount = availability.HtmlFileCount,
                ContextExtraction = availability.ContextExtraction,
                HtmlExtraction = availability.HtmlExtraction
            };
    }

    // Add a new ignored URL to the list
    void AddIgnoredUrl()
    {
        settings.ExcludedUrls.Add("");
    }

    // Remove an ignored URL from the list
    void RemoveIgnoredUrl(int index)
    {
        settings.ExcludedUrls.RemoveAt(index);
    }
}
<h3>ServerManagement</h3>
<div class="container">
    <div class="row">
        <div class="p-2 col-md-6 ">
        <div class="alert alert-primary">
            <h4>Server Settings</h4>
            @if (settings == null)
            {
                <div class="spinner-border text-info" role="status" />
            }
            else
            {
                    <div class="row m-2">
                        <div class="col-sm-5">
                            <label for="dbPath">Database Path:</label>
                        </div>
                        <div class="col-sm-7">
                            <input id="dbPath" @bind="@settings.DbPath" class="form-control" />
                        </div>
                    </div>

                    <div class="row m-2">
                        <div class="col-sm-5">
                            <label for="rootUrl">Root URL:</label>
                        </div>
                        <div class="col-sm-7">
                            <input id="rootUrl" @bind="@settings.RootUrl" class="form-control" />
                        </div>
                    </div>

                    <div class="row m-2">
                        <div class="col-sm-5">
                            <label for="waitedClassName">Waited class name:</label>
                        </div>
                        <div class="col-sm-7">
                            <input id="waitedClassName" @bind="@settings.WaitedClassName" class="form-control" />
                        </div>
                    </div>

                    <div class="row m-2">
                        <div class="col-sm-5">
                            <label for="ignoredUrls">Ignored Urls:</label>
                        </div>
                        <div class="col-sm-7">
                            @foreach (var (ignored, index) in settings.ExcludedUrls.Select((value, index) => (value, index)))
                            {
                                <div class="input-group mb-2">
                                    <input id="ignoredUrls" @bind="@settings.ExcludedUrls[index]" class="form-control" />
                                    <div class="input-group-append">
                                        <button class="btn btn-danger" @onclick="(() => RemoveIgnoredUrl(index))">Remove</button>
                                    </div>
                                </div>
                            }
                            <button class="btn btn-success" @onclick="AddIgnoredUrl">Add URL</button>
                        </div>
                    </div>
                <button class="btn btn-primary w-100 m-3" @onclick="SaveSettings">Save settings</button>
            }
            </div>
        </div>


        <!-- Service Status Column -->
        <div class="p-2 col-md-6 ">
        <div class="alert alert-secondary">
            <h4>Service Status</h4>
            @if(serviceStatus == null)
            {
                <div class="spinner-border text-secondary" role="status" />
            }else{
            <dl class="row">
                <dt class="col-sm-5">Context Count:</dt>
                <dd class="col-sm-9">@serviceStatus?.ContextCount</dd>

                <dt class="col-sm-5">HTML File Count:</dt>
                <dd class="col-sm-9">@serviceStatus?.HtmlFileCount</dd>

                <dt class="col-sm-5">HTML Extraction:</dt>
                <dd class="col-sm-9">@serviceStatus?.HtmlExtraction</dd>

                <dt class="col-sm-5">Context Extraction:</dt>
                <dd class="col-sm-9">@serviceStatus?.ContextExtraction</dd>
                <!-- Add more properties as needed -->
            </dl>}
            </div>
        </div>


    </div>
    <div class="row">
        <div class="col-md-6 mb-3">
            <button class="btn btn-primary btn-block" @onclick="RunHtmlExtraction">Start HTML Extraction</button>
        </div>
        <div class="col-md-6 mb-3">
            <button class="btn btn-primary btn-block" @onclick="RunContextExtraction">Start Context Extraction</button>
        </div>
    </div>
    @if (toastText != "")
    {
        <div class="row">
            <div class="alert alert-info" role="alert">
            @toastText
            </div>
        </div>
    }
</div>
